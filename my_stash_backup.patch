diff --git a/Content/AI/Behavior_Tree/BB_Animal.uasset b/Content/AI/Behavior_Tree/BB_Animal.uasset
index 9193c16..6d022e1 100644
--- a/Content/AI/Behavior_Tree/BB_Animal.uasset
+++ b/Content/AI/Behavior_Tree/BB_Animal.uasset
@@ -1,3 +1,3 @@
 version https://git-lfs.github.com/spec/v1
-oid sha256:07b1261f6ad04230cf6e06f8b2c6e87003c0801072fc72cb94f7779fc4f74412
-size 3210
+oid sha256:02866bf8dc51b8d8369a9744aaa69d5a297831c8b4d119b1ffd303f8bb6f5030
+size 3323
diff --git a/Content/AI/Behavior_Tree/BT_Aggressive.uasset b/Content/AI/Behavior_Tree/BT_Aggressive.uasset
new file mode 100644
index 0000000..8385c30
--- /dev/null
+++ b/Content/AI/Behavior_Tree/BT_Aggressive.uasset
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:d6522e593a81163aecf8a75735b5b140509784233e23e10da196b0e3fe9925c9
+size 12130
diff --git a/Content/AI/Behavior_Tree/BT_Defensive.uasset b/Content/AI/Behavior_Tree/BT_Defensive.uasset
new file mode 100644
index 0000000..27a8ad9
--- /dev/null
+++ b/Content/AI/Behavior_Tree/BT_Defensive.uasset
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:4a65ba9cfc041ab14651cf69b3f7891e21ef132db1bc453125678798dfd190ad
+size 12883
diff --git a/Source/EMBER/AI/BTT_Attack.cpp b/Source/EMBER/AI/BTT_Attack.cpp
new file mode 100644
index 0000000..5f2c1e5
--- /dev/null
+++ b/Source/EMBER/AI/BTT_Attack.cpp
@@ -0,0 +1,14 @@
+// Fill out your copyright notice in the Description page of Project Settings.
+
+
+#include "BTT_Attack.h"
+
+UBTT_Attack::UBTT_Attack()
+{
+	NodeName = TEXT("AttackState");
+}
+
+EBTNodeResult::Type UBTT_Attack::ExecuteTask(UBehaviorTreeComponent& Comp, uint8* NodeMemory)
+{
+	return Super::ExecuteTask(Comp, NodeMemory);
+}
diff --git a/Source/EMBER/AI/BTT_Attack.h b/Source/EMBER/AI/BTT_Attack.h
new file mode 100644
index 0000000..847549b
--- /dev/null
+++ b/Source/EMBER/AI/BTT_Attack.h
@@ -0,0 +1,20 @@
+// Fill out your copyright notice in the Description page of Project Settings.
+
+#pragma once
+
+#include "CoreMinimal.h"
+#include "BehaviorTree/Tasks/BTTask_BlackboardBase.h"
+#include "BTT_Attack.generated.h"
+
+/**
+ * 
+ */
+UCLASS()
+class EMBER_API UBTT_Attack : public UBTTask_BlackboardBase
+{
+	GENERATED_BODY()
+
+public:
+	UBTT_Attack();
+	virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& Comp, uint8* NodeMemory) override;
+};
diff --git a/Source/EMBER/AI/BaseAI.cpp b/Source/EMBER/AI/BaseAI.cpp
index 05a86b2..798760f 100644
--- a/Source/EMBER/AI/BaseAI.cpp
+++ b/Source/EMBER/AI/BaseAI.cpp
@@ -1,5 +1,6 @@
 #include "BaseAI.h"
 #include "BaseAIController.h"
+#include "BehaviorTree/BlackboardComponent.h"
 #include "Perception/AIPerceptionComponent.h"
 #include "kismet/GameplayStatics.h"
 
@@ -34,13 +35,25 @@ void ABaseAI::BeginPlay()
 	Super::BeginPlay();
 }
 
-float ABaseAI::TakeDamage(float Damage, FDamageEvent const& DamageEvent, AController* EventInstigator,
+float ABaseAI::TakeDamage(float DamageAmount, FDamageEvent const& DamageEvent, AController* EventInstigator,
                           AActor* DamageCauser)
 {
 	if (!HasAuthority()) return 0;
 
-	float ActualDamage = Super::TakeDamage(Damage, DamageEvent, EventInstigator, DamageCauser);
+	float ActualDamage = Super::TakeDamage(DamageAmount, DamageEvent, EventInstigator, DamageCauser);
 
+	AAIController* AIController = Cast<AAIController>(GetController());
+	if (AIController)
+	{
+		UBlackboardComponent* BlackboardComponent = AIController->GetBlackboardComponent();
+		if (BlackboardComponent)
+		{
+			BlackboardComponent->SetValueAsBool("IsAttacked", true);
+			BlackboardComponent->SetValueAsObject("Attacker", DamageCauser);
+			BlackboardComponent->SetValueAsVector("OriginLocation", GetActorLocation());
+		}
+	}
+	
 	if (ActualDamage > 0 && !bIsDie)
 	{
 		CurrentHP -= ActualDamage;
diff --git a/Source/EMBER/AI/Decorator/BTD_IsWithinOriginArea.cpp b/Source/EMBER/AI/Decorator/BTD_IsWithinOriginArea.cpp
new file mode 100644
index 0000000..9f7e51d
--- /dev/null
+++ b/Source/EMBER/AI/Decorator/BTD_IsWithinOriginArea.cpp
@@ -0,0 +1,21 @@
+#include "BTD_IsWithinOriginArea.h"
+#include "AIController.h"
+#include "BehaviorTree/BlackboardComponent.h"
+
+UBTD_IsWithinOriginArea::UBTD_IsWithinOriginArea()
+{
+}
+
+bool UBTD_IsWithinOriginArea::CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const
+{
+	AAIController* AIController = OwnerComp.GetAIOwner();
+	UBlackboardComponent* BlackboardComponent = OwnerComp.GetBlackboardComponent();
+
+	if (!AIController || !BlackboardComponent) return false;
+
+	FVector CurrentLocation = AIController->GetPawn()->GetActorLocation();
+	FVector OriginLocation = BlackboardComponent->GetValueAsVector("OriginLocation");
+	float Distance = FVector::Dist(CurrentLocation, OriginLocation);
+
+	return Distance <= MaxDistance;
+}
diff --git a/Source/EMBER/AI/Decorator/BTD_IsWithinOriginArea.h b/Source/EMBER/AI/Decorator/BTD_IsWithinOriginArea.h
new file mode 100644
index 0000000..b81b95b
--- /dev/null
+++ b/Source/EMBER/AI/Decorator/BTD_IsWithinOriginArea.h
@@ -0,0 +1,21 @@
+#pragma once
+
+#include "CoreMinimal.h"
+#include "BehaviorTree/Decorators/BTDecorator_Blackboard.h"
+#include "BTD_IsWithinOriginArea.generated.h"
+
+
+UCLASS(Blueprintable)
+class EMBER_API UBTD_IsWithinOriginArea : public UBTDecorator_Blackboard
+{
+	GENERATED_BODY()
+
+public:
+	UBTD_IsWithinOriginArea();
+
+	UPROPERTY(EditAnywhere, Category="AI")
+	float MaxDistance;
+
+protected:
+	virtual bool CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const override;	
+};
